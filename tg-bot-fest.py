import telebot
from telebot import types
import time
import sqlite3
# Bot for the festival. In the future, change the text

# name bot: FestivalQuestBot
bot = telebot.TeleBot('6357823947:AAHxKALq_W8zbSFe13GQSuqvYI25-nMcYYQ')

# info user
user_data = {}

# hello and disclaimer
@bot.message_handler(commands=['start'])
def welcome_new_members(message):
    keyboard = types.InlineKeyboardMarkup()
    button = types.InlineKeyboardButton(text="–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å", callback_data='continue')
    keyboard.add(button)

    bot.send_message(message.chat.id,
                     "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∫–≤–µ—Å—Ç-–±–æ—Ç–∞ ‚Äú–ù–∞–π–¥–∏ —Ç–æ–≥–æ, –Ω–µ –∑–Ω–∞—é –∫–æ–≥–æ‚Äù —Ñ–µ—Å—Ç–∏–≤–∞–ª—è ‚Äú–ö–∏–±–µ—Ä —Å–∫–∞–∑–∫–∞‚Äù üëã\n\n"
                     "–ü—Ä–µ–∂–¥–µ —á–µ–º –Ω–∞—á–∞—Ç—å –∫–≤–µ—Å—Ç, –æ–∑–Ω–∞–∫–æ–º—å—Ç–µ—Å—å —Å–æ <b>–≤—Å—Ç—É–ø–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π.</b>\n‚¨áÔ∏è\n\n"
                     "–í—Å—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ, –≤–∫–ª—é—á–∞—è –µ–≥–æ –ª–∏—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ, —è–≤–ª—è–µ—Ç—Å—è –ø–æ–ª–Ω–æ—Å—Ç—å—é –≤—ã–º—ã—à–ª–µ–Ω–Ω–æ–π –∏ –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω–∞ –∏—Å–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ –¥–ª—è —Ä–∞–∑–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω—ã—Ö —Ü–µ–ª–µ–π –≤ —Ä–∞–º–∫–∞—Ö —Ñ–µ—Å—Ç–∏–≤–∞–ª—è ‚Äú–ö–∏–±–µ—Ä —Å–∫–∞–∑–∫–∞‚Äù. \n"
                     "–ù–∏–∫–∞–∫–∏–µ —Ä–µ–∞–ª—å–Ω—ã–µ –ª–∏—á–Ω–æ—Å—Ç–∏ –∏–ª–∏ —Å–æ–±—ã—Ç–∏—è –Ω–µ –∏–º–µ—é—Ç –æ—Ç–Ω–æ—à–µ–Ω–∏—è –∫ —ç—Ç–æ–º—É –ø–µ—Ä—Å–æ–Ω–∞–∂—É –∏–ª–∏ –µ–≥–æ –∏—Å—Ç–æ—Ä–∏–∏.\n\n"
                     "–ú–Ω–µ –≤—Å—ë –ø–æ–Ω—è—Ç–Ω–æ üëç", reply_markup=keyboard, parse_mode='HTML')

# registration
@bot.callback_query_handler(func=lambda call: call.data == 'continue')
def ask_username(call):
    global user_data

    chat_id = call.message.chat.id
    user_data[chat_id] = {'user_name': call.from_user.first_name, 'id': chat_id, 'mail_user': '',
                          'fio_flag': False, 'prog_lang_flag': False, 'city_flag': False, 'count_win': 0}

    msg = bot.send_message(chat_id, '<b>–í–∞–∂–Ω–æ</b>‚ùó\n\n–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –º–æ–∂–Ω–æ –≤–≤–µ—Å—Ç–∏ —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑! –ù–µ —É–¥–∞–ª—è–π—Ç–µ –¥–∞–Ω–Ω—ã–π —á–∞—Ç –∏ –Ω–µ —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å –∑–∞–Ω–æ–≤–æ, —á—Ç–æ–±—ã –Ω–µ –ø–æ—Ç–µ—Ä—è—Ç—å —Ç–µ–∫—É—â–∏–π –ø—Ä–æ–≥—Ä–µ—Å—Å.\n\n–í–≤–µ–¥–∏—Ç–µ –∏–º—è:', parse_mode='HTML')
    bot.register_next_step_handler(msg, ask_mailuser)


def ask_mailuser(message):
    global user_data
    user_data[message.chat.id]['user_name'] = message.text
    msg = bot.send_message(message.chat.id, f'–ü—Ä–∏—è—Ç–Ω–æ –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è, {user_data[message.chat.id]["user_name"]}! –î–ª—è —É—á–∞—Å—Ç–∏—è –≤ –∫–æ–Ω–∫—É—Ä—Å–µ, –≤–µ–¥–∏—Ç–µ –≤–∞—à –∞–¥—Ä–µ—Å —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ–π –ø–æ—á—Ç—ã.\n'
                                                 f'–ú—ã –æ–±–µ—â–∞–µ–º, —á—Ç–æ –æ–Ω –æ—Å—Ç–∞–Ω–µ—Ç—Å—è –≤ —Ü–µ–ª–æ—Å—Ç–∏ –∏ —Å–æ—Ö—Ä–∞–Ω–Ω–æ—Å—Ç–∏.')
    bot.register_next_step_handler(msg, save_infouser)

def save_infouser(message):
    global user_data
    user_data[message.chat.id]['mail_user'] = message.text
    user_name = user_data[message.chat.id]['user_name']

    conn = sqlite3.connect('C:\\Users\\pgodunov\\PycharmProjects\\pythonProject\\.venv\\fest-users-data.db')
    cursor = conn.cursor()
    cursor.execute("CREATE TABLE IF NOT EXISTS users (user_id INTEGER PRIMARY KEY, name TEXT, email TEXT)")

    cursor.execute("SELECT * FROM users WHERE user_id=?", (message.chat.id,))
    data = cursor.fetchone()
    if data is not None:
        return

    cursor.execute("INSERT INTO users (user_id, name, email) VALUES (?, ?, ?)",
                   (message.chat.id, user_name, message.text))

    conn.commit()
    conn.close()
    bot.send_message(message.chat.id, '–°–ø–∞—Å–∏–±–æ! –í–∞—à–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –±—ã–ª–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞.')

    for i in range(3, 0, -1):
        bot.send_message(message.chat.id, '–ü—Ä–æ–¥–æ–ª–∂–∏–º —á–µ—Ä–µ–∑: ' + str(i))
        time.sleep(1)
    start_new_game(message)


# story
@bot.message_handler(commands=['ready'])
def start_new_game(message):
    bot.send_message(message.chat.id,"–¶–∞—Ä—å –Ω–∞–ø–∏—Å–∞–ª –≤–∞–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram –æ —Ç–æ–º, —á—Ç–æ –µ–º—É –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã –¥–∞–Ω–Ω—ã–µ –æ–¥–Ω–æ–≥–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞. –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, hr-–º–µ–Ω–µ–¥–∂–µ—Ä—ã, –æ–∫–∞—è–Ω–Ω—ã–µ, –ø–æ—Ç–µ—Ä—è–ª–∏ –≤—Å–µ –µ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç—ã. –¢–µ–ø–µ—Ä—å, —ç—Ç–æ –¥–µ–ª–æ –ª–æ–∂–∏—Ç—å—Å—è –Ω–∞ –≤–∞—à–∏ –ø–ª–µ—á–∏. "
                     "–ï–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω–æ–µ, —á—Ç–æ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏, —ç—Ç–æ –µ–≥–æ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ _ ___ ___ __ __. –°–æ—Ç—Ä—É–¥–Ω–∏–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç –ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç–æ–º –∏ —è–≤–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –≤ —Å–æ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–µ—Ç—è—Ö, –º–µ—Å—Å–µ–Ω–¥–∂–µ—Ä–∞—Ö –∏ –¥—Ä—É–≥–∏—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–∞—Ö. \n"
                     "–í–∞—à–∞ –∑–∞–¥–∞—á–∞ - –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —ç—Ç–æ–≥–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞.\n"
                     "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /todolist, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å —Å–≤–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å –∏ —Å–ø–∏—Å–æ–∫ –¥–∞–Ω–Ω—ã—Ö, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å.\n"
                     "–ê –µ—Å–ª–∏ –ø–æ—Ç—Ä–µ–±—É–µ—Ç—Å—è –ø–æ–º–æ—â—å, –Ω–∞–ø–∏—à–∏—Ç–µ /help\n\n"
                     "–ù–∞—Ö–æ–¥–∏—Ç–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏ –≤–ø–∏—Å—ã–≤–∞–π—Ç–µ –µ—ë –≤ –ª—é–±–æ–π –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏. –ñ–µ–ª–∞–µ–º —É–¥–∞—á–∏ üçÄ")

# –î–ª—è —Å–∫—Ä–∏–Ω—à–æ—Ç–∞ —á–∞—Ç–∞ –æ—Ç —Ü–∞—Ä—è
# –ú–Ω–µ –Ω—É–∂–Ω—ã –¥–∞–Ω–Ω—ã–µ –Ω–∞—à–µ–≥–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞, –Ω–æ hr-–º–µ–Ω–µ–¥–∂–µ—Ä—ã –æ–∫–æ—è–Ω–Ω—ã–µ, –ø–æ—Ç–µ—Ä—è–ª–∏ –≤—Å–µ –µ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç—ã! üò° –¢–µ–ø–µ—Ä—å —ç—Ç–æ —Ç–≤–æ—è –∑–∞–¥–∞—á–∞. –ú—ã –Ω–∞—à–ª–∏ —Ç–æ–ª—å–∫–æ –µ–≥–æ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ _ _ _  . –û–Ω —Ä–∞–±–æ—Ç–∞–µ—Ç –ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç–æ–º, —Ç–∞–∫ —á—Ç–æ, –Ω–∞–≤–µ—Ä–Ω—è–∫–∞, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –≤ —Å–æ—Ü—Å–µ—Ç—è—Ö –∏ –º–µ—Å—Å–µ–Ω–¥–∂–µ—Ä–∞—Ö. üåê
# –¢–≤–æ—è –∑–∞–¥–∞—á–∞ - –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —ç—Ç–æ–≥–æ —á–µ–ª–æ–≤–µ–∫–∞.
# –ò—Å–ø–æ–ª—å–∑—É–π /todolist, —á—Ç–æ–±—ã –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å —Å–≤–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å –∏ —É–∑–Ω–∞—Ç—å, –∫–∞–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –Ω–∞–¥–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å. üìù


# help input
@bot.message_handler(commands=['help'])
def user_help(message):
    keyboard = types.InlineKeyboardMarkup()
    key_what = types.InlineKeyboardButton(text='–° —á–µ–≥–æ –Ω–∞—á–∞—Ç—å?', callback_data='what')
    keyboard.add(key_what)
    key_end = types.InlineKeyboardButton(text='–ß—Ç–æ –ø–æ–∫–∞–∑–∞—Ç—å –ø–æ—Å–ª–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è?', callback_data='end')
    keyboard.add(key_end)
    bot.send_message(message.chat.id, '–° —á–µ–º –≤–∞–º —Ç—Ä–µ–±—É–µ—Ç—Å—è –ø–æ–º–æ—â—å?', reply_markup=keyboard)

# help output
@bot.callback_query_handler(func=lambda call: True)
def callback_query(call):
    if call.data == "what":
        bot.send_message(call.message.chat.id, "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –Ω–∞–π—Ç–∏ —ç—Ç–æ–≥–æ —á–µ–ª–æ–≤–µ–∫–∞ –≤ Telegram –ø–æ –µ–≥–æ –Ω–æ–º–µ—Ä—É —Ç–µ–ª–µ—Ñ–æ–Ω–∞. –í–æ–∑–º–æ–∂–Ω–æ, –≤ –µ–≥–æ –ø—Ä–æ—Ñ–∏–ª–µ –±—É–¥—É—Ç –∑–∞—Ü–µ–ø–∫–∏.")
    elif call.data == "end":
        bot.send_message(call.message.chat.id, "–ü–æ—Å–ª–µ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è –æ—Ç–∫—Ä–æ–π—Ç–µ /todolist –∏ –ø–æ–∫–∞–∂–∏—Ç–µ. –ï—Å–ª–∏ –≤—Å–µ –¥–∞–Ω–Ω—ã–µ —Å–æ–±—Ä–∞–Ω—ã, –ø—É–Ω–∫—Ç—ã –≤ –Ω—ë–º –±—É–¥—É—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω—ã –∏ –≤—ã –ø–æ–ª—É—á–∏—Ç–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏–∏.")


# to-do list
@bot.message_handler(commands=['todolist'])
def to_do_list(message):
    global user_data
    tasks = ['–§–ò–û —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞', '–õ—é–±–∏–º—ã–π —è–∑—ã–∫ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è', '–ì–æ—Ä–æ–¥ –ø—Ä–æ–∂–∏–≤–∞–Ω–∏—è']
    if message.chat.id not in user_data:
        user_data[message.chat.id] = {'fio_flag': False, 'prog_lang_flag': False, 'city_flag': False, 'count_win': 0}
    user_flags = user_data[message.chat.id]
    bot.send_message(message.chat.id, f"–°–ø–∏—Å–æ–∫ –¥–∞–Ω–Ω—ã—Ö —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞:")
    for task, flag in zip(tasks, ['fio_flag', 'prog_lang_flag', 'city_flag']):
        if flag in user_flags and user_flags[flag]:
            bot.send_message(message.chat.id, f"‚òë <del>{task}</del>", parse_mode='HTML')
        else:
            bot.send_message(message.chat.id, f"‚¨ú {task}")


# –í—Å–µ –∫–≤–µ—Å—Ç—ã: fio_flag prog_lang_flag city_flag count_win
@bot.message_handler(content_types=['text'])
def check_answer(message):
    global user_data
    answer = message.text.lower()
    chat_id = message.chat.id

    # print(user_data)

    if chat_id in user_data:
        # FIO search
        if answer == "–î–∞—Ç–∞–µ–≤ –ò–ª—å—è –ú–∞–∫—Å–∏–º–æ–≤–∏—á".lower():
            if user_data[chat_id]['fio_flag'] == False:
                user_data[chat_id]['fio_flag'] = True
                user_data[chat_id]['count_win'] += 1
                bot.send_message(message.chat.id, '–§–ò–û —É–≥–∞–¥–∞–Ω–æ!')
                return
            else:
                bot.send_message(message.chat.id, '–í—ã —É–∂–µ –Ω–∞—à–ª–∏ –§–ò–û —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞.')

        # prog_lang search
        if answer == "JavaScript".lower():
            if user_data[chat_id]['prog_lang_flag'] == False:
                user_data[chat_id]['prog_lang_flag'] = True
                user_data[chat_id]['count_win'] += 1
                bot.send_message(message.chat.id, 'JavaScript - –ª—é–±–∏–º—ã–π —è–∑—ã–∫ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Ç—Ä—É–¥–Ω–∏–∫–∞.')
                return
            else:
                bot.send_message(message.chat.id, '–õ—é–±–∏–º—ã–π —è–∑—ã–∫ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è —É–∂–µ —É–≥–∞–¥–∞–Ω.')

        # city search
        if answer == "–ú–æ—Å–∫–≤–∞".lower():
            if user_data[chat_id]['city_flag'] == False:
                user_data[chat_id]['city_flag'] = True
                user_data[chat_id]['count_win'] += 1
                bot.send_message(message.chat.id, '–í–µ—Ä–Ω–æ! –°–æ—Ç—Ä—É–¥–Ω–∏–∫ –∂–∏–≤—ë—Ç –≤ –ú–æ—Å–∫–≤–µ.')
                return
            else:
                bot.send_message(message.chat.id, '–ì–æ—Ä–æ–¥ –ø—Ä–æ–∂–∏–≤–∞–Ω–∏—è —É–∂–µ —É–≥–∞–¥–∞–Ω.')

        if user_data[chat_id]['count_win'] == 3:
            bot.send_message(message.chat.id, '–í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–µ—Ä—à–∏–ª–∏ –∫–≤–µ—Å—Ç üôå \n –ü–æ–∫–∞–∂–∏—Ç–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–π /todolist')

        if answer not in ["–î–∞—Ç–∞–µ–≤ –ò–ª—å—è –ú–∞–∫—Å–∏–º–æ–≤–∏—á", "JavaScript", "–ú–æ—Å–∫–≤–∞"]:
            bot.send_message(message.chat.id, '–¢–∞–∫–æ–π –∫–æ–º–∞–Ω–¥—ã –Ω–µ—Ç.')


bot.polling(non_stop=True)
